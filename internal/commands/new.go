package commands

import (
	"context"
	"flag"
	"time"

	"github.com/eugenetriguba/bolt/internal/configloader"
	"github.com/eugenetriguba/bolt/internal/models"
	"github.com/eugenetriguba/bolt/internal/output"
	"github.com/eugenetriguba/bolt/internal/repositories"
	"github.com/eugenetriguba/bolt/internal/services"
	"github.com/google/subcommands"
)

type NewCmd struct {
	message string
}

func (*NewCmd) Name() string {
	return "new"
}

func (*NewCmd) Synopsis() string {
	return "create a new database migration"
}

func (*NewCmd) Usage() string {
	return `create [-message|-m]:
	Create a new database migration
  `
}

func (cmd *NewCmd) SetFlags(f *flag.FlagSet) {
	f.StringVar(
		&cmd.message,
		"message",
		"autogenerated",
		"Message to use for the migration",
	)
	f.StringVar(&cmd.message, "m", cmd.message, "alias for -message")
}

func (cmd *NewCmd) Execute(
	_ context.Context,
	f *flag.FlagSet,
	_ ...interface{},
) subcommands.ExitStatus {
	consoleOutputter := output.ConsoleOutputter{}

	cfg, err := configloader.NewConfig()
	if err != nil {
		consoleOutputter.Error(err.Error())
		return subcommands.ExitFailure
	}

	migrationFsRepo, err := repositories.NewMigrationFsRepo(cfg.MigrationsDir)
	if err != nil {
		consoleOutputter.Error(err.Error())
		return subcommands.ExitFailure
	}

	migrationService := services.NewMigrationService(
		nil,
		migrationFsRepo,
		consoleOutputter,
	)
	if err != nil {
		consoleOutputter.Error(err.Error())
		return subcommands.ExitFailure
	}

	migration := models.NewMigration(time.Now(), cmd.message)
	err = migrationService.CreateMigration(migration)
	if err != nil {
		consoleOutputter.Error(err.Error())
		return subcommands.ExitFailure
	}

	return subcommands.ExitSuccess
}
